# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagrantfile
# Version: 1.0.5
# Author: Steffen Kroggel
#
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # we use ubuntu/xenial64
  # if you need a local box, go to http://cloud-images.ubuntu.com and 
  # download the vagrant.box-file manually
  # config.vm.box = "local-xenial"
  config.vm.box = "ubuntu/xenial64"

  # Set higher value for longer bootime
  config.vm.boot_timeout = 600

  # Resize HD. We get the ID of the HD with "VBoxManage list hdds"
  # config.vm.provider "virtualbox" do |vb|
  #  vb.customize ["modifyhd", "7dbb0c98-4239-4415-bbe3-b1e4f11c2472", "--resize", "50240"]
  # end

  # A little more power for us *grunt* - should be done using vagrantfaster, because
  # it calculates the values based on the host maschines capacities
  # --> vagrant plugin install vagrant-faster
  # Attention: More virtual CPUs may actually slow down your VM...
  config.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network :forwarded_port, guest: 9080, host: 80, auto_correct: true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 2480, host: 2480
  # config.vm.network "forwarded_port", guest: 1080, host: 1080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network :private_network, ip: "192.168.68.100"
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", type: "dhcp"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # NFS (default) may be faster. NFS requires administration privileges (see: https://www.vagrantup.com/docs/synced-folders/nfs.html).
  config.vm.synced_folder "../www", "/var/www", mount_options: ["nolock"], nfs: true

  config.nfs.map_uid = 501
  config.nfs.map_gid = 210
  # config.vm.synced_folder "../www", "/var/www", mount_options: ["dmode=777", "fmode=776"]

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # >> /vagrant/vm_build.log 2>&1
  config.vm.provision "shell", inline: <<-SHELL

    # if [ -f /var/lib/apt/lists/lock ] || [ -f /var/cache/apt/archives/lock ] || [ -f /var/lib/dpkg/lock ]; then
    #    echo "'apt' seems to be used by another process. Please try again. Exiting."
    #    exit 2
    # fi

    # Disabling stdin for debconf. solves error: 'dpkg-reconfigure: unable to re-open stdin: No file or directory'
    dpkg-reconfigure debconf -f noninteractive -p critical

    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "IMPORTANT:if you are using an internal proxy, please hit STRG + C to"
    echo "exit the script here, setup your proxy by editing /etc/environment in"
    echo "the VM and start the provisioning script again with 'vagrant up --provision'"
    echo " "
    echo "Waiting 10 Seconds before continuing..."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    sleep 10

    echo "======================================================"

    apt-get update

    echo "======================================================"
    echo "Installing some basics"
    if [ ! -f "/var/log/vagrantfile-basics" ]; then
        apt-get install -y mc git debconf-utils
        touch /var/log/vagrantfile-basics
    else
        echo "Basics already installed. Skipped."
    fi


    echo "======================================================"
    echo "Installing and configuring Apache2 & Apache-Modules..."
    if [ ! -d "/etc/apache2" ]; then
        apt-get install -y apache2
        service apache2 stop
    else
        service apache2 stop
        echo "Apache2 already installed."
    fi

    echo "Set symlinks to configuration files..."
    cd /etc/apache2
    rm -r conf-available
    cp -r /vagrant/configuration/etc/apache2/conf-available conf-available

    rm -r sites-available
    cp -r /vagrant/configuration/etc/apache2/sites-available sites-available

    rm apache2.conf
    cp /vagrant/configuration/etc/apache2/apache2.conf apache2.conf

    rm envvars
    cp /vagrant/configuration/etc/apache2/envvars envvars

    rm ports.conf
    cp /vagrant/configuration/etc/apache2/ports.conf ports.conf

    echo "Enabling/Disabling modules..."
    a2enmod expires
    a2enmod rewrite
    a2enmod mime
    a2enmod deflate
    a2enmod headers
    a2dismod mpm_event
    a2dismod mpm_prefork
    a2enmod mpm_worker
    a2dismod access_compat
    a2enmod proxy
    a2enmod proxy_fcgi
    a2enmod macro
    a2enmod authz_host

    echo "Enabling sites and confs..."
    cd /etc/apache2/sites-available

    a2enconf advanced-configuration
    a2enconf security
    a2enconf vhost-php-fcgi
    a2enconf vhost-ext-phpmyadmin-fcgi

    echo "======================================================"
    echo "Installing MySQL..."
    if [ ! -d "/etc/mysql" ]; then
        debconf-set-selections <<< 'mysql-server mysql-server/root_password password rkw'
        debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password rkw'
        apt-get install -y mysql-server
        service mysql stop
    else
        service mysql stop
        echo "MySQL already installed. Skipped."
    fi

    echo "Set symlinks to configuration files..."
    cd /etc/mysql
    rm mysql.cnf
    cp /vagrant/configuration/etc/mysql/mysql.cnf mysql.cnf


    echo "======================================================"
    echo "Installing PHP-FPM (5.6, 7.0 and 7.2) and Extensions..."
    if [ ! -d "/etc/php" ]; then
        add-apt-repository ppa:ondrej/php
        apt-get update
        apt-get install -y php5.6-cli php5.6-fpm
        apt-get install -y php7.0-cli php7.0-fpm
        apt-get install -y php7.2-cli php7.2-fpm
        service php5.6-fpm stop
        service php7.0-fpm stop
        service php7.2-fpm stop

        echo "Installing Extensions..."
        apt-get install -y php-apcu
        apt-get install -y curl php5.6-curl
        apt-get install -y php5.6-mysql
        apt-get install -y php5.6-bcmath
        apt-get install -y php5.6-bz2
        apt-get install -y php5.6-dom
        apt-get install -y php5.6-mcrypt
        apt-get install -y php5.6-xml
        apt-get install -y php5.6-zip
        apt-get install -y php5.6-gd
        apt-get install -y php5.6-soap
        apt-get install -y imagemagick php5.6--imagick
        
        apt-get install -y php-apcu
        apt-get install -y curl php7.0-curl
        apt-get install -y php7.0-mysql
        apt-get install -y php7.0-bcmath
        apt-get install -y php7.0-mbstring
        apt-get install -y php7.0-bz2
        apt-get install -y php7.0-dom
        apt-get install -y php7.0-mcrypt
        apt-get install -y php7.0-xml
        apt-get install -y php7.0-zip
        apt-get install -y php7.0-gd
        apt-get install -y php7.0-soap
        apt-get install -y php7.0-imagick

        apt-get install -y php7.0-curl
        apt-get install -y php7.2-mysql
        apt-get install -y php7.2-bcmath
        apt-get install -y php7.2-bz2
        apt-get install -y php7.2-dom
        # apt-get install -y php7.2-mcrypt
        apt-get install -y php7.2-xml
        apt-get install -y php7.2-zip
        apt-get install -y php7.2-gd
        apt-get install -y php7.2-soap
        apt-get install -y php7.2-imagick
    else
        service php5.6-fpm stop
        service php7.0-fpm stop
        service php7.2-fpm stop
        echo "PHP already installed. Skipped."
    fi


    echo "Set symlinks to configuration files..."
    for dir in 5.6 7.0 7.2
    do

    echo ${dir}

        cd /etc/php/${dir}
        rm cli/php.ini
        rm fpm/php.ini
        cp /vagrant/configuration/etc/php/${dir}/cli/php.ini cli/php.ini
        cp /vagrant/configuration/etc/php/${dir}/fpm/php.ini fpm/php.ini

        rm -r fpm/pool.d
        cp -r /vagrant/configuration/etc/php/${dir}/fpm/pool.d fpm/pool.d

    done

    echo "======================================================"
    echo "Installing PHPMyAdmin..."
    if [ ! -d /usr/share/phpmyadmin ]; then

        debconf-set-selections <<< 'phpmyadmin phpmyadmin/mysql/admin-pass password'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/app-password-confirm password'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/setup-password password'
        # MySQL application password for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/mysql/app-pass password'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/password-confirm password'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/upgrade-error select abort'
        # Deconfigure database for phpmyadmin with dbconfig-common?
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/dbconfig-remove boolean true'
        # Host running the MySQL server for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/remote/newhost string'
        # Host name of the MySQL database server for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/remote/host select localhost'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/remove-error select abort'
        # Database type to be used by phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/database-type select mysql'
        # Configure database for phpmyadmin with dbconfig-common?
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/dbconfig-install boolean false'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/internal/reconfiguring boolean false'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/install-error select abort'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/mysql/admin-user string'
        # MySQL database name for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/db/dbname string'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/passwords-do-not-match error'
        # Perform upgrade on database for phpmyadmin with dbconfig-common?
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/dbconfig-upgrade boolean true'
        # Connection method for MySQL database of phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/mysql/method select Unix socket'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/setup-username string admin'
        # Back up the database for phpmyadmin before upgrading?
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/upgrade-backup boolean true'
        # Reinstall database for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/dbconfig-reinstall boolean false'
        # Delete the database for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/purge boolean false'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/remote/port string'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/missing-db-package-error select abort'
        # MySQL username for phpmyadmin
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/db/app-user string'
        debconf-set-selections <<< 'phpmyadmin phpmyadmin/internal/skip-preseed boolean false'
        apt-get install -y phpmyadmin
    else
        echo "PhpMyadmin already installed. Skipped."
    fi

    echo "======================================================"
    echo "Installing Varnish..."
    if [ ! -d "/etc/varnish" ]; then
        apt-get install -y varnish
        service varnish stop
    else
        service varnish stop
        echo "Varnish already installed. Skipped."
    fi

    echo "Set symlinks to configuration files..."
    if [ -f "/lib/systemd/system/varnish.service" ]; then
        rm /lib/systemd/system/varnish.service
    fi
    cp /vagrant/configuration/lib/systemd/system/varnish.service /lib/systemd/system/varnish.service

    if [ -f "/etc/varnish/rkw.vcl" ]; then
        rm /etc/varnish/rkw.vcl
    fi
    cp /vagrant/configuration/etc/varnish/rkw.vcl /etc/varnish/rkw.vcl
    chmod 644 /etc/varnish/rkw.vcl

    systemctl daemon-reload


    echo "======================================================"
    echo "Installing Postfix..."
    if [ ! -d "/etc/postfix" ]; then
        debconf-set-selections <<< "postfix postfix/mailname string host.local"
        debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
        apt-get install -y postfix

        service postfix stop

        echo "Setup of configuration files for Postfix..."
        echo "relayhost = 127.0.0.1:1025" >> /etc/postfix/main.cf
    else
        echo "Postfix already installed. Skipped."
    fi

    echo "======================================================"
    echo "Installing Mailcatcher..."
    if [ ! -f "/lib/systemd/system/mailcatcher.service" ]; then

        echo "Installing dependencies"
        apt-get install -y build-essential software-properties-common curl wget tmux
        apt-get install -y libsqlite3-dev ruby2.3-dev

        echo "Installing Mailcatcher..."
        gem install mailcatcher

        echo "Set symlinks to configuration files..."
        if [ -f "/lib/systemd/system/mailcatcher.service" ]; then
            rm /lib/systemd/system/mailcatcher.service
        fi
        cp /vagrant/configuration/lib/systemd/system/mailcatcher.service /lib/systemd/system/mailcatcher.service
        systemctl enable mailcatcher

    else
        echo "Mailcatcher already installed. Skipped."
    fi


    echo "======================================================"
    echo "Starting Services..."
    echo "...MySQL..."
    service mysql start

    echo "...Varnish..."
    service varnish start

    echo "...Apache..."
    service apache2 start

    echo "...PHP 5.6..."
    service php5.6-fpm start

    echo "...PHP 7.0..."
    service php7.0-fpm start

    echo "...PHP 7.2..."
    service php7.2-fpm start

    echo "...Postfix..."
    service postfix start

    echo "...Mailcatcher..."
    service mailcatcher start

    echo "======================================================"
    echo "FINISHED!!!"
    echo "======================================================"

  SHELL
end
